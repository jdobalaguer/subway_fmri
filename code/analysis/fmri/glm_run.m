
function scan = glm_run()
    %% WARNINGS
    %#ok<*NUSED,*ALIGN,*INUSD,*NBRAK>
    
    %% SCANNER
    scan = parameters();
    
    %% SET SUBJECTS
    scan.subject.r      = [6,10];
    
    %% GLM SETTINGS
    scan.glm.copy       = true(1,6);
    scan.glm.delay      = 0;
    scan.glm.function   = 'fir';
    scan.glm.fir.ord    = 8;
    scan.glm.fir.len    = 14;
%     scan.glm.hrf.ord    = [0,0];
    scan.glm.image      = 'smooth4';
    scan.glm.marge      = 5;
    scan.glm.name       = 'GLMM_fir14-0&8_Cues(Easy+Bool)_Trial(Easy+Reward+Correct+C+L+I+Z)_Feed';
    scan.glm.pooling    = true;
    scan.glm.redo       = 3; %[1-5] = do from the {regressors,first regression, first contrast, second contrast, dont}
    
    scan.glm.contrasts.generic = false;
    scan.glm.contrasts.extra   = struct('name',{...
                                            'Cue(Easy)'...
                                            'Cue(Bool)'...
                                            'Trial(Easy)',...
                                            'Trial(Reward)',...
                                            'Trial(Correct)',...
                                            'Trial(C)',...
                                            'Trial(L)',...
                                            'Trial(I)',...
                                            'Trial(log(Z))',...
                                            'Trial(C>LI)'...
                                            'Trial(L>CI)'...
                                            'Trial(I>CL)'...
                                        },'regressor',{...
                                            {'Cue(Easy)'}...
                                            {'Cue(Bool)'}...
                                            {'Trial(Easy)'},...
                                            {'Trial(Reward)'},...
                                            {'Trial(Correct)'},...
                                            {'Trial(C)'},...
                                            {'Trial(L)'},...
                                            {'Trial(I)'},...
                                            {'Trial(log(Z))'},...
                                            {'Trial(C)','Trial(L)','Trial(I)'},...
                                            {'Trial(C)','Trial(L)','Trial(I)'},...
                                            {'Trial(C)','Trial(L)','Trial(I)'},...
                                        },'weight',{...
                                            [+1],... Cue
                                            [+1],...
                                            [+1],... Trial
                                            [+1],...
                                            [+1],...
                                            [+1],...
                                            [+1],...
                                            [+1],...
                                            [+1],...
                                            [+2,-1,-1],...
                                            [+2,-1,-1],...
                                            [+2,-1,-1],...
                                        });
    scan.glm.plot.contrast  = '';
    scan.glm.plot.mask      = '';
    scan.glm.plot.extension = 'img';
    
    %% LOAD DATA
    data  = load_data_ext( 'scanner');
    block = load_block_ext('scanner');
    
    %% GLM REGRESSORS
    
    % block regressors
    r_block_easy = (block.vbxi_subline_start == block.vbxi_subline_goal);
    r_block_bool = logical(data.resp_bool_all(data.expt_first));
    
    % data regressors
    r_data_easy     = (data.vbxi_subline_start == data.vbxi_subline_goal);
    r_data_reward   = (data.vbxi_reward == 5);
    r_data_correct  = (data.resp_correct_all);
    r_data_C        = (data.resp_subline_change);
    r_data_L        = (data.vbxi_elbow_in);
    r_data_I        = (data.vbxi_exchange_in & ~data.resp_subline_change);
    r_data_Z        = (data.optm_dist_station_goal);
    r_data_U        = (data.optm_dist_station_subgoal);
    
    % regressors
    scan.glm.regressor = struct(                        ...
        'subject', {                                    ... subject
                     block.expt_subject ,               ...
                     data.expt_subject,                 ...
                     block.expt_subject },              ...
        'session', {                                    ... session
                     block.expt_session ,               ...
                     data.expt_session,                 ...
                     block.expt_session },              ...
        'onset',   {                                    ... onset
                     block.vbxi_onset_cue ,             ...
                     data.vbxi_onset,                   ...
                     block.vbxi_onset_reward },         ...
        'discard', {                                    ... discard
                     [],                                ...
                     [],                                ...
                     isnan(block.vbxi_onset_reward) },  ... %(participant 1 didn't get a feedback in the last block)
        'name',    {                                    ... name
                     'Cue' ,                            ...
                     'Trial' ,                          ...
                     'Feed' },                          ...
        'subname', {                                    ... subname
                     {                                  ...
                       'Cue(Easy)',                     ...
                       'Cue(Bool)',                     ...
                     },                                 ...
                     {                                  ...
                       'Trial(Easy)',                   ...
                       'Trial(Reward)',                 ...
                       'Trial(Correct)',                ...
                       'Trial(C)',                      ...
                       'Trial(L)',                      ...
                       'Trial(I)',                      ...
                       'Trial(log(Z))',                 ...
                     },                                 ...
                     {} },                              ...
        'level',   {                                    ... level
                     {    r_block_easy                  ...     cues
                          r_block_bool                  ...
                     }, { r_data_easy                   ...     trial
                          r_data_reward                 ...
                          r_data_correct                ...
                          r_data_C                      ...
                          r_data_L                      ...
                          r_data_I                      ...
                          log(r_data_Z)                 ...
                     }, {                               ...     feed
                     } },                               ...
        'duration',{                                    ... duration
                     0,                                 ...     cues
                     0,                                 ...     trial
                     0,                                 ...     feed
                     });
                                     
    %% SANITY CHECK
    scan = scan_initialize(scan);
     
    %% RUN
    scan_glm_run(scan);
end
